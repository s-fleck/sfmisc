[{"path":"https://s-fleck.github.io/sfmisc/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2018 Stefan Fleck Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://s-fleck.github.io/sfmisc/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Fleck. Author, maintainer.","code":""},{"path":"https://s-fleck.github.io/sfmisc/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fleck S (2022). sfmisc: Add commonly used utility functions R package. R package version 1.0.14, https://s-fleck.github.io/sfmisc/.","code":"@Manual{,   title = {sfmisc: Add commonly used utility functions to an R package},   author = {Stefan Fleck},   year = {2022},   note = {R package version 1.0.14},   url = {https://s-fleck.github.io/sfmisc/}, }"},{"path":"https://s-fleck.github.io/sfmisc/index.html","id":"sfmisc","dir":"","previous_headings":"","what":"Add commonly used utility functions to an R package","title":"Add commonly used utility functions to an R package","text":"Utility functions use across many packages, don’t warrant external dependency. functions sfmisc depend base-R. sfmisc can loaded like normal R package, can also embedded R packages sfmisc::use_sfmisc(). Since functions small self-contained, convenient way get extra utilities R-package without adding external dependency. Note: Many () helpers included package overlap tidyverse functions name (without compilation dependencies)","code":""},{"path":"https://s-fleck.github.io/sfmisc/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Add commonly used utility functions to an R package","text":"","code":"# install.packages(\"devtools\") devtools::install_github(\"s-fleck/sfmisc\")"},{"path":"https://s-fleck.github.io/sfmisc/reference/all_are_distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if all elements of a vector are unique — all_are_distinct","title":"Test if all elements of a vector are unique — all_are_distinct","text":"Test elements vector unique","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/all_are_distinct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if all elements of a vector are unique — all_are_distinct","text":"","code":"all_are_distinct(x, empty_value = FALSE)"},{"path":"https://s-fleck.github.io/sfmisc/reference/all_are_distinct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if all elements of a vector are unique — all_are_distinct","text":"x object can handled unique() (usually vector list) empty_value Value return function called vector length 0 (e.g. NULL, numeric(), ...)","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/all_are_distinct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if all elements of a vector are unique — all_are_distinct","text":"TRUE FALSE","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/all_are_distinct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if all elements of a vector are unique — all_are_distinct","text":"","code":"all_are_distinct(c(1,2,3)) #> [1] TRUE all_are_distinct(c(1,1,1)) #> [1] FALSE"},{"path":"https://s-fleck.github.io/sfmisc/reference/all_are_identical.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if all elements of a vector are identical — all_are_identical","title":"Test if all elements of a vector are identical — all_are_identical","text":"Test elements vector identical","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/all_are_identical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if all elements of a vector are identical — all_are_identical","text":"","code":"all_are_identical(x, empty_value = FALSE)"},{"path":"https://s-fleck.github.io/sfmisc/reference/all_are_identical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if all elements of a vector are identical — all_are_identical","text":"x object can handled unique() (usually vector list) empty_value Value return function called vector length 0 (e.g. NULL, numeric(), ...)","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/all_are_identical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if all elements of a vector are identical — all_are_identical","text":"TRUE FALSE","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/all_are_identical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if all elements of a vector are identical — all_are_identical","text":"","code":"all_are_identical(c(1,2,3)) #> [1] FALSE all_are_identical(c(1,1,1)) #> [1] TRUE"},{"path":"https://s-fleck.github.io/sfmisc/reference/as_scalar.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert vector if identical elements to scalar — as_scalar","title":"Convert vector if identical elements to scalar — as_scalar","text":"Returns unique(x) elements x identical, throws error .","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/as_scalar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert vector if identical elements to scalar — as_scalar","text":"","code":"as_scalar(x)"},{"path":"https://s-fleck.github.io/sfmisc/reference/as_scalar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert vector if identical elements to scalar — as_scalar","text":"x object can handled unique() (usually vector list)","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/as_scalar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert vector if identical elements to scalar — as_scalar","text":"scalar type x","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/assert.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert a condition — assert","title":"Assert a condition — assert","text":"simpler efficient base::stopifnot() easy mechanism supplying custom error messages. opposed stopifnot(), assert() works single (scalar) assertions.","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/assert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert a condition — assert","text":"","code":"assert(cond, ..., call. = FALSE, domain = NULL)"},{"path":"https://s-fleck.github.io/sfmisc/reference/assert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert a condition — assert","text":"cond TRUE FALSE (without attributes). FALSE throw exception automatically constructed error message (... supplied). Anything else throw exception stating cond valid. ... passed stop() call. passed stop() domain passed stop()","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/assert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert a condition — assert","text":"TRUE success","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/assert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert a condition — assert","text":"","code":"if (FALSE) { assert(1 == 1) assert(1 == 2) }"},{"path":"https://s-fleck.github.io/sfmisc/reference/assert_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert all elements of a vector or list are TRUE — assert_all","title":"Assert all elements of a vector or list are TRUE — assert_all","text":"Check elements x TRUE, throw informative warning contains position name () element","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/assert_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert all elements of a vector or list are TRUE — assert_all","text":"","code":"assert_all(x)"},{"path":"https://s-fleck.github.io/sfmisc/reference/assert_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert all elements of a vector or list are TRUE — assert_all","text":"x logical vector list logical elements","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/assert_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert all elements of a vector or list are TRUE — assert_all","text":"TRUE","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/assert_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert all elements of a vector or list are TRUE — assert_all","text":"","code":"try(   assert_all(c(\"this is true\" = TRUE, \"this is FALSE\" = FALSE, FALSE)) ) #> Error : Assertion failed: #> [2] `this is FALSE` is not TRUE #> [3] is not TRUE"},{"path":"https://s-fleck.github.io/sfmisc/reference/assert_namespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert a package is installed — assert_namespace","title":"Assert a package is installed — assert_namespace","text":"Assert package installed","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/assert_namespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert a package is installed — assert_namespace","text":"","code":"assert_namespace(...)"},{"path":"https://s-fleck.github.io/sfmisc/reference/camelCase.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a character vector to camelCase — camelCase","title":"Turn a character vector to camelCase — camelCase","text":"EXPERIMENTAL","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/camelCase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a character vector to camelCase — camelCase","text":"","code":"camelCase(x, sep_pattern = \"_|\\\\s\")"},{"path":"https://s-fleck.github.io/sfmisc/reference/camelCase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a character vector to camelCase — camelCase","text":"x character vector sep_pattern regex pattern match separators","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/camelCase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a character vector to camelCase — camelCase","text":"character vector follows camelCase guidelines","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/camelCase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a character vector to camelCase — camelCase","text":"","code":"camelCase(\"foo_bar\") #> [1] \"fooBar\""},{"path":"https://s-fleck.github.io/sfmisc/reference/comma.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse text vectors with a comma — comma","title":"Collapse text vectors with a comma — comma","text":"Collapse text vectors comma","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/comma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse text vectors with a comma — comma","text":"","code":"comma(..., collapse = \", \")"},{"path":"https://s-fleck.github.io/sfmisc/reference/comma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse text vectors with a comma — comma","text":"x character vector","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/comma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse text vectors with a comma — comma","text":"character scalar","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/commaset.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse text vectors with a comma (no duplicates) — commaset","title":"Collapse text vectors with a comma (no duplicates) — commaset","text":"Collapse text vectors comma (duplicates)","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/commaset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse text vectors with a comma (no duplicates) — commaset","text":"","code":"commaset(..., collapse = \", \")"},{"path":"https://s-fleck.github.io/sfmisc/reference/commaset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse text vectors with a comma (no duplicates) — commaset","text":"x character vector","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/commaset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse text vectors with a comma (no duplicates) — commaset","text":"character scalar","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/compact.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove NULLs from an object (usually a list) — compact","title":"Remove NULLs from an object (usually a list) — compact","text":"Remove NULLs object (usually list)","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/compact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove NULLs from an object (usually a list) — compact","text":"","code":"compact(x)"},{"path":"https://s-fleck.github.io/sfmisc/reference/dupes.html","id":null,"dir":"Reference","previous_headings":"","what":"Return (unique) duplicated elements of a vector or rows of a data.frame — dupes","title":"Return (unique) duplicated elements of a vector or rows of a data.frame — dupes","text":"every element/row x least one duplicate, return one instance element.","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/dupes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return (unique) duplicated elements of a vector or rows of a data.frame — dupes","text":"","code":"dupes(x, ...)"},{"path":"https://s-fleck.github.io/sfmisc/reference/dupes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return (unique) duplicated elements of a vector or rows of a data.frame — dupes","text":"x atomic vector data.frame ... passed duplicated()","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/dupes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return (unique) duplicated elements of a vector or rows of a data.frame — dupes","text":"","code":"dupes(c(1, 1, 1, 2)) #> [1] 1 dupes(cars[c(1, 1, 1, 2), ]) #>   speed dist #> 1     4    2"},{"path":"https://s-fleck.github.io/sfmisc/reference/equalish.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for equality within a tolerance level — equalish","title":"Check for equality within a tolerance level — equalish","text":"Check equality within tolerance level","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/equalish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for equality within a tolerance level — equalish","text":"","code":"equalish(x, y, tolerance = .Machine$double.eps^0.5)  equalish_frac(x, y, tolerance = .Machine$double.eps^0.5)"},{"path":"https://s-fleck.github.io/sfmisc/reference/equalish.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for equality within a tolerance level — equalish","text":"x, y numeric vectors tolerance numeric scalar. tolerance level (absolute value). Defaults .Machine$double.eps^0.5 sensible default comparing floating point numbers.","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/equalish.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for equality within a tolerance level — equalish","text":"equalish() returns TRUE absolute difference x y less tolerance. equalish_frac() returns TRUE relative difference x y smaller tolerance. relative difference defined abs(x - y) / pmax(abs(x), abs(y)). x y 0 relative difference defined, function still return TRUE.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/sfmisc/reference/equalish.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for equality within a tolerance level — equalish","text":"","code":"a <- 0.7 b <- 0.2 a - b == 0.5 #> [1] FALSE equalish(a - b, 0.5) #> [1] TRUE equalish_frac(1000, 1010, tolerance = 0.01) #> [1] TRUE equalish_frac(1000, 1010, tolerance = 0.009) #> [1] FALSE equalish_frac(0, 0) #> [1] TRUE"},{"path":"https://s-fleck.github.io/sfmisc/reference/fmt_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Format class of an object — fmt_class","title":"Format class of an object — fmt_class","text":"Format class object","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/fmt_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format class of an object — fmt_class","text":"","code":"fmt_class(x, open = \"<\", close = \">\")  class_fmt(x, ignore = NULL, open = \"<\", close = \">\")"},{"path":"https://s-fleck.github.io/sfmisc/reference/fmt_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format class of an object — fmt_class","text":"x R object open, close opening closing bracket use formatting ignore subclasses ignore","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/fmt_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format class of an object — fmt_class","text":"","code":"x <- iris class(x) <- c(\"flowers\", \"data.frame\") class_fmt(x) #> [1] \"<flowers/data.frame>\" fmt_class(class(x)) #> [1] \"<flowers/data.frame>\""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_blank.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a String is Blank — is_blank","title":"Check if a String is Blank — is_blank","text":"Check wheter character vector contains spaces","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_blank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a String is Blank — is_blank","text":"","code":"is_blank(x)"},{"path":"https://s-fleck.github.io/sfmisc/reference/is_blank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a String is Blank — is_blank","text":"x R Object.","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_blank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a String is Blank — is_blank","text":"either TRUE FALSE","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_candidate_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if a Vector or Combination of Vectors is a Candidate Key — is_candidate_key","title":"Test if a Vector or Combination of Vectors is a Candidate Key — is_candidate_key","text":"Checks elements atomic vector x, combination elements x x list, unique neither NA infinite.","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_candidate_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if a Vector or Combination of Vectors is a Candidate Key — is_candidate_key","text":"","code":"is_candidate_key(x)"},{"path":"https://s-fleck.github.io/sfmisc/reference/is_candidate_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if a Vector or Combination of Vectors is a Candidate Key — is_candidate_key","text":"x atomic vector list atomic vectors","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_candidate_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if a Vector or Combination of Vectors is a Candidate Key — is_candidate_key","text":"TRUE/FALSE","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_candidate_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if a Vector or Combination of Vectors is a Candidate Key — is_candidate_key","text":"","code":"is_candidate_key(c(1, 2, 3)) #> [1] TRUE is_candidate_key(c(1, 2, NA)) #> [1] FALSE is_candidate_key(c(1, 2, Inf)) #> [1] FALSE  td <- data.frame(   x = 1:10,   y = 1:2,   z = 1:5 )  is_candidate_key(list(td$x, td$z)) #> [1] TRUE # a data.frame is just a special list is_candidate_key(td[, c(\"y\", \"z\")]) #> [1] TRUE"},{"path":"https://s-fleck.github.io/sfmisc/reference/is_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Object has length 0 — is_empty","title":"Check if Object has length 0 — is_empty","text":"Check wheter object either TRUE FALSE.","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Object has length 0 — is_empty","text":"","code":"is_empty(x)"},{"path":"https://s-fleck.github.io/sfmisc/reference/is_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Object has length 0 — is_empty","text":"x R Object.","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Object has length 0 — is_empty","text":"either TRUE FALSE","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Objects have the same length — is_equal_length","title":"Check if Objects have the same length — is_equal_length","text":"Check Objects length","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Objects have the same length — is_equal_length","text":"","code":"is_equal_length(...)"},{"path":"https://s-fleck.github.io/sfmisc/reference/is_equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Objects have the same length — is_equal_length","text":"... number R Objects.","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Objects have the same length — is_equal_length","text":"either TRUE FALSE","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenient predicate functions — is_error","title":"Convenient predicate functions — is_error","text":"Convenient predicate functions","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenient predicate functions — is_error","text":"","code":"is_error(x)  is_try_error(x)  is_scalar(x)  is_POSIXct(x)  is_scalar_POSIXct(x)  is_POSIXlt(x)  is_scalar_POSIXlt(x)  is_POSIXt(x)  is_scalar_POSIXt(x)  is_Date(x)  is_scalar_Date(x)  is_scalar_list(x)  is_scalar_atomic(x)  is_scalar_logical(x)  is_scalar_integer(x)  is_scalar_factor(x)  is_scalar_list(x)  is_scalar_numeric(x)  is_scalar_character(x)  is_vector(x)  is_bool(x)  is_scalar_integerish(x)  is_n(x)  is_n0(x)  is_not_distinct_from(x, y)  is_distinct_from(x, y)  is_windows_path(x)  is_dir(x)  is_empty_dir(x)"},{"path":"https://s-fleck.github.io/sfmisc/reference/is_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenient predicate functions — is_error","text":"x R Object.","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenient predicate functions — is_error","text":"either TRUE FALSE","code":""},{"path":[]},{"path":"https://s-fleck.github.io/sfmisc/reference/is_integerish.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Object is Integer-like — is_integerish","title":"Check if Object is Integer-like — is_integerish","text":"Check wheter object either TRUE FALSE.","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_integerish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Object is Integer-like — is_integerish","text":"","code":"is_integerish(x, na_rm = FALSE)"},{"path":"https://s-fleck.github.io/sfmisc/reference/is_integerish.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Object is Integer-like — is_integerish","text":"x R Object.","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_integerish.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Object is Integer-like — is_integerish","text":"either TRUE FALSE","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_scalar_bool.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Object is a Boolean — is_scalar_bool","title":"Check if Object is a Boolean — is_scalar_bool","text":"Check wheter object either TRUE FALSE.","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_scalar_bool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Object is a Boolean — is_scalar_bool","text":"","code":"is_scalar_bool(x)"},{"path":"https://s-fleck.github.io/sfmisc/reference/is_scalar_bool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Object is a Boolean — is_scalar_bool","text":"x R Object.","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/is_scalar_bool.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Object is a Boolean — is_scalar_bool","text":"either TRUE FALSE","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/path_tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up paths to make them comparable, inspired by fs::path_tidy() — path_tidy","title":"Clean up paths to make them comparable, inspired by fs::path_tidy() — path_tidy","text":"Clean paths make comparable, inspired fs::path_tidy()","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/path_tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up paths to make them comparable, inspired by fs::path_tidy() — path_tidy","text":"","code":"path_tidy(x)"},{"path":"https://s-fleck.github.io/sfmisc/reference/path_tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up paths to make them comparable, inspired by fs::path_tidy() — path_tidy","text":"x character vector","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/path_tidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up paths to make them comparable, inspired by fs::path_tidy() — path_tidy","text":"character vector","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/ptrunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste and Truncate — ptrunc","title":"Paste and Truncate — ptrunc","text":"Paste Truncate","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/ptrunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste and Truncate — ptrunc","text":"","code":"ptrunc(..., width = 40L, sep = \", \", collapse = \", \", dots = \" ...\")"},{"path":"https://s-fleck.github.io/sfmisc/reference/ptrunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste and Truncate — ptrunc","text":"... one R objects, converted character vectors. width (maximum) width result sep character string separate terms.      NA_character_. collapse optional character string separate results.      NA_character_. dots character scalar. String use ellipses x vector","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/ptrunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paste and Truncate — ptrunc","text":"character scalar","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/ptrunc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paste and Truncate — ptrunc","text":"","code":"ptrunc(month.abb) #> [1] \"Jan, Feb, Mar, Apr, May, Jun, Jul, A ...\"   ptrunc(month.abb, month.name) #> [1] \"Jan, January, Feb, February, Mar, Ma ...\""},{"path":"https://s-fleck.github.io/sfmisc/reference/rd_describe_str.html","id":null,"dir":"Reference","previous_headings":"","what":"Create description string for listlike R objects Rd documentation — rd_describe_str","title":"Create description string for listlike R objects Rd documentation — rd_describe_str","text":"EXPERIMENTAL","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/rd_describe_str.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create description string for listlike R objects Rd documentation — rd_describe_str","text":"","code":"rd_describe_str(x)"},{"path":"https://s-fleck.github.io/sfmisc/reference/rd_describe_str.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create description string for listlike R objects Rd documentation — rd_describe_str","text":"x R object","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/sfmisc-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Private utility functions — sfmisc-package","title":"Private utility functions — sfmisc-package","text":"Commonly used utility functions without dependencies can easily embedded R packages.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/sfmisc/reference/sfmisc-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Private utility functions — sfmisc-package","text":"Maintainer: Stefan Fleck stefan.b.fleck@gmail.com (ORCID)","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/url_tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up urls to make them comparable — url_tidy","title":"Clean up urls to make them comparable — url_tidy","text":"Clean urls make comparable","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/url_tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up urls to make them comparable — url_tidy","text":"","code":"url_tidy(...)"},{"path":"https://s-fleck.github.io/sfmisc/reference/use_sfmisc.html","id":null,"dir":"Reference","previous_headings":"","what":"Use sfmisc functions in current package — use_sfmisc","title":"Use sfmisc functions in current package — use_sfmisc","text":"Use sfmisc functions current package","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/use_sfmisc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use sfmisc functions in current package — use_sfmisc","text":"","code":"use_sfmisc()"},{"path":"https://s-fleck.github.io/sfmisc/reference/use_sfmisc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use sfmisc functions in current package — use_sfmisc","text":"TRUE success","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple data validation — validate","title":"Simple data validation — validate","text":"EXPERIMENTAL Minimalistic mutli-criteria data validation. Designed work nicely together assert_all() (see examples)","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple data validation — validate","text":"","code":"validate(...)"},{"path":"https://s-fleck.github.io/sfmisc/reference/validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple data validation — validate","text":"... Arbitrary expressions evaluate either TRUE FALSE. Expressions evaluate anything else, counted FALSE throw warning. can name expressions generate nice labels (usually necessary).","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple data validation — validate","text":"named logical vector guranteed NAs.","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple data validation — validate","text":"","code":"validation <- validate(   all(iris$Petal.Length < 5),   `all species are valid` = all(iris$Species %in% c(\"setosa\", \"versicolor\", \"virginica\")),   `all sepals are small` = all(iris$Sepal.Length < 1) )  # validate can be used `with()` for added convenience: validation <- with(iris, validate(   all(Petal.Length < 5),   `all species are valid` = all(Species %in% c(\"setosa\", \"versicolor\", \"virginica\")),   `all sepals are small` = all(Sepal.Length < 1) ))  # validate works together with assert_all to produce nice errors try(   assert_all(validation) ) #> Error : Assertion failed: #> [1] `all(Petal.Length < 5)` is not TRUE #> [3] `all sepals are small` is not TRUE"},{"path":"https://s-fleck.github.io/sfmisc/reference/walk.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to each element of a list or vector (without returning anything) — walk","title":"Apply a function to each element of a list or vector (without returning anything) — walk","text":"Like lapply, return .x instead results .f","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/walk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to each element of a list or vector (without returning anything) — walk","text":"","code":"walk(.x, .f, ...)"},{"path":"https://s-fleck.github.io/sfmisc/reference/walk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to each element of a list or vector (without returning anything) — walk","text":".x atomic vector list .f function ... arguments passed .f","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/walk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to each element of a list or vector (without returning anything) — walk","text":".x","code":""},{"path":"https://s-fleck.github.io/sfmisc/reference/walk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to each element of a list or vector (without returning anything) — walk","text":"","code":"walk(month.name, print) #> [1] \"January\" #> [1] \"February\" #> [1] \"March\" #> [1] \"April\" #> [1] \"May\" #> [1] \"June\" #> [1] \"July\" #> [1] \"August\" #> [1] \"September\" #> [1] \"October\" #> [1] \"November\" #> [1] \"December\""}]
